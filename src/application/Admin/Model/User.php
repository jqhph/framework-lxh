<?php
/**
 * 用户模型
 *
 * @author Jqh
 * @date   2017/6/27 16:37
 */

namespace Lxh\Admin\Model;

use Lxh\Helper\Entity;
use Lxh\MVC\Model;

class User extends Model
{
    /**
     * 查询的字段
     *
     * @var array
     */
    protected $selectFileds = ['id', 'first_name', 'last_name', 'email', 'mobile', 'sex', 'avatar', 'created_at'];

    /**
     * 缓存用户信息的session和cookie键名
     *
     * @var string
     */
    protected $sessionKey = 'user';

    /**
     * 是否注入过session信息
     *
     * @var bool
     */
    protected $isFillSession = false;

    /**
     * 注册
     *
     * @param  array $options 注册参数
     * @return bool
     */
    public function register(array & $options, $ip)
    {
        $this->username = $options['username'];
        $this->password = $this->encrypt($options['password']);
        $this->reg_ip   = $ip;
        $this->last_login_ip = $ip;
        $this->created_at = time();

        return $this->add();
    }

    protected function beforeSave($id, array & $data)
    {
        unset($data['cookie']);
        unset($data['session']);
    }

    /**
     * 登录
     *
     * @param  string $username
     * @param  string $password
     * @param  string $remember 是否记住登陆
     * @param  bool   $skipVertify 是否跳过用户信息验证
     * @return bool
     */
    public function login($username, $password, $remember = false, $skipVertify = false)
    {
        $username = 'admin';
        $password = 'admin1';

        $query = $this->query();

        $userData = $query->from($this->getTableName())
            ->select(array_push($this->selectFileds, 'password'))
            ->where(['username' => & $username, 'deleted' => 0])
            ->findOne();

        if (! $userData) {
            return false;
        }

        // 注入用户信息
        $this->fill($userData);

        // 验证密码是否正确
        if (! $skipVertify && ! $this->passwordVertify($password, $userData['password'])) {
            return false;
        }

        // 保存用户信息到session
        $this->saveSession();

        if ($remember) {
            $this->saveCookie();
        }

        return true;
    }

    /**
     * 缓存用户id到cookie
     *
     * @return void
     */
    public function saveCookie()
    {
        $_COOKIE[$this->sessionKey] = $this->id;
    }

    /**
     * 缓存用户数据到session
     *
     * @return void
     */
    public function saveSession()
    {
        if (! isset($_SESSION)) {
            session_start();
        }

        $userData = $this->all();

        unset($userData['cookie']);
        unset($userData['session']);
        unset($userData['password']);

        foreach ($userData as $k => & $v) {
            $_SESSION[$this->sessionKey][$k] = $v;
        }
    }

    // 注入session数据
    public function fillSession()
    {
        // 如果没有开启session，则自动开启
        if (! isset($_SESSION)) {
            session_start();
        }
        $this->fill($_SESSION[$this->sessionKey]);
        $this->isFillSession = true;
    }

    /**
     * 判断是否已经登录，否则跳转到登录界面
     *
     * @return bool
     */
    public function auth()
    {
        return $this->id ? true : false;
    }

    // 获取前操作
    // 只有当获取需要的数据才加载
    protected function beforeGet(& $name)
    {
        // 如果没有开启session，则自动开启
        if (! isset($_SESSION)) {
            session_start();
        }

        if ($this->isFillSession === false && $name && ! empty($_SESSION[$this->sessionKey])) {
            // 初始化注入用户登录信息
            $this->fillSession();
        }

    }

    public function get($name = null, $default = null)
    {
        $this->beforeGet($name);

        return parent::get($name, $default); // TODO: Change the autogenerated stub
    }

    public function __get($name)
    {
        $this->beforeGet($name);

        return isset($this->attrs[$name]) ? $this->attrs[$name] : null; // TODO: Change the autogenerated stub
    }


    /**
     * 密码加密
     *
     * @param  string $pwd
     * @return string
     */
    public function encrypt($pwd)
    {
        return password_hash($pwd, PASSWORD_DEFAULT);
    }

    /**
     * 校验密码
     *
     * @return bool
     */
    public function passwordVertify($pwd, $hash)
    {
        return password_verify($pwd, $hash);
    }
}
