// 进度条君
eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('(4(h,k){"4"===E 11&&11.1Z?11(k):"21"===E 1z?2c.1z=k():h.2f=k()})(x,4(){4 h(a,b,d){6 a<b?b:a>d?d:a}4 k(a,b,d){a="R"===e.B?{V:"R("+D*(-1+a)+"%,0,0)"}:"U"===e.B?{V:"U("+D*(-1+a)+"%,0)"}:{"1u-2b":D*(-1+a)+"%"};a.P="W "+b+"A "+d;6 a}4 p(a,b){6 0<=("2a"==E a?a:m(a)).24(" "+b+" ")}4 q(a,b){7 d=m(a),c=d+b;p(d,b)||(a.12=c.1o(1))}4 r(a,b){7 c=m(a);p(a,b)&&(b=c.H(" "+b+" "," "),a.12=b.1o(1,b.J-1))}4 m(a){6(" "+(a.12||"")+" ").H(/\\s+/1C," ")}7 c={1W:"0.2.0"},e=c.1V={1b:.1U,1e:"1Q",B:"",1g:1P,N:!0,1n:.1O,1p:1N,1t:!0,16:\'[S="10"]\',1B:\'[S="T"]\',C:"I",19:\'<i K="10" S="10"><i K="1M"></i></i><i K="T" S="T"><i K="T-1L"></i></i>\'};c.1H=4(a){7 b,c;X(b 9 a)c=a[b],1h 0!==c&&a.1i(b)&&(e[b]=c);6 x};c.j=1k;c.F=4(a){7 b=c.1m();a=h(a,e.1b,1);c.j=1===a?1k:a;7 d=c.1l(!b),n=d.G(e.16),f=e.1g,v=e.1e;d.1r;w(4(b){""===e.B&&(e.B=c.1s());l(n,k(a,f,v));1===a?(l(d,{P:"1D",1v:1}),d.1r,Q(4(){l(d,{P:"W "+f+"A 1w",1v:0});Q(4(){c.1x();b()},f)},f)):Q(b,f)});6 x};c.1m=4(){6"1y"===E c.j};c.14=4(){c.j||c.F(0);7 a=4(){Q(4(){c.j&&(c.N(),a())},e.1p)};e.N&&a();6 x};c.1A=4(a){6 a||c.j?c.15(.3+.5*Y.13()).F(1):x};c.15=4(a){7 b=c.j;6 b?("1y"!==E a&&(a=(1-b)*h(Y.13()*b,.1,.1E)),b=h(b+a,0,.1F),c.F(b)):c.14()};c.N=4(){6 c.15(Y.13()*e.1n)};(4(){7 a=0,b=0;c.1G=4(d){y(!d||"1I"===d.1J())6 x;0===b&&c.14();a++;b++;d.1K(4(){b--;0===b?(a=0,c.1A()):c.F((a-b)/a)});6 x}})();c.1l=4(a){y(c.1d())6 8.Z("o");q(8.1j,"o-1f");7 b=8.1R("i");b.1S="o";b.1T=e.19;7 d=b.G(e.16),n=a?"-D":D*(-1+(c.j||0));a=8.G(e.C);l(d,{P:"W 0 1w",V:"R("+n+"%,0,0)"});e.1t||(d=b.G(e.1B))&&d&&d.M&&d.M.1a(d);a!=8.I&&q(a,"o-17-C");a.1X(b);6 b};c.1x=4(){r(8.1j,"o-1f");r(8.G(e.C),"o-17-C");7 a=8.Z("o");a&&a&&a.M&&a.M.1a(a)};c.1d=4(){6!!8.Z("o")};c.1s=4(){7 a=8.I.L,b="1Y"9 a?"1c":"20"9 a?"18":"22"9 a?"A":"23"9 a?"O":"";6 b+"25"9 a?"R":b+"26"9 a?"U":"1u"};7 w=4(){4 a(){7 c=b.27();c&&c(a)}7 b=[];6 4(c){b.28(c);1==b.J&&a()}}(),l=4(){4 a(a){6 a.H(/^-A-/,"A-").H(/-([\\29-z])/1C,4(a,b){6 b.1q()})}4 b(b){b=a(b);7 d;y(!(d=e[b])){d=b;a:{7 t=8.I.L;y(!(b 9 t))X(7 u=c.J,f=b.2d(0).1q()+b.2e(1),g;u--;)y(g=c[u]+f,g 9 t){b=g;2g a}}d=e[d]=b}6 d}7 c=["1c","O","18","A"],e={};6 4(a,c){7 d=2h,e,f;y(2==d.J)X(e 9 c){y(f=c[e],1h 0!==f&&c.1i(e)){7 d=a,g=e,g=b(g);d.L[g]=f}}2i e=a,g=d[1],d=d[2],g=b(g),e.L[g]=d}}();6 c});',62,143,'||||function||return|var|document|in|||||||||div|status|||||nprogress|||||||||this|if||ms|positionUsing|parent|100|typeof|set|querySelector|replace|body|length|class|style|parentNode|trickle||transition|setTimeout|translate3d|role|spinner|translate|transform|all|for|Math|getElementById|bar|define|className|random|start|inc|barSelector|custom|Moz|template|removeChild|minimum|Webkit|isRendered|easing|busy|speed|void|hasOwnProperty|documentElement|null|render|isStarted|trickleRate|substring|trickleSpeed|toUpperCase|offsetWidth|getPositioningCSS|showSpinner|margin|opacity|linear|remove|number|exports|done|spinnerSelector|gi|none|95|994|promise|configure|resolved|state|always|icon|peg|800|02|200|ease|createElement|id|innerHTML|08|settings|version|appendChild|WebkitTransform|amd|MozTransform|object|msTransform|OTransform|indexOf|Perspective|Transform|shift|push|da|string|left|module|charAt|slice|NProgress|break|arguments|else'.split('|'),0,{}));
(function (o) {
    /**
     * 监听单页应用加载完毕事件（不包括pjax）
     *
     * @param call
     * @private
     */
    o.__complete__ = function(call) {
        $(document).on('app.completed', call);
    };

    /**
     * 监听pjax加载完毕事件
     *
     * @param call
     */
    o.pjax_complete = function (call) {
        $(document).on('pjax:complete', call);
    };

    // 数组去重
    o.array_unique = function ($this) {
        var res = [], i;
        for (i = 0; i < $this.length; i++) {
            if ($this[i]) {
                res.push($this[i]);
            }
        }
        return res;
    };

    // 删除数组中的某个值
    o.array_remove = function (arr, val) {
        var res = [], i;
        for (i in arr) {
            if (val == arr[i]) {
                continue;
            }
            res[i] = arr[i];
        }
        return res;
    };

    o.trim = function (x) {
        return x.replace(/^\s+|\s+$/gm,'');
    };

    // 添加初始化完成后执行的动作
    o.lxhActions = [];
    o.__then__ = function (call) {
        lxhActions.push(call)
    };

    // 添加需要引入的js
    o.jsLibArr = [];
    o.require_js = function (data) {
        if (typeof data == 'string') {
            jsLibArr.push(data)
        } else {
            for (var i in data) {
                jsLibArr.push(data[i]);
            }
        }
    };

    // 添加需要引入的css
    o.cssLibArr = [];
    o.require_css = function (data) {
        if (typeof data == 'string') {
            cssLibArr.push(data.indexOf('.css') == -1 ? (data+'.css') : data);
        } else {
            for (var i in data) {
                cssLibArr.push(data[i]);
            }
        }
    };
    /**
     * Convert name from Camel Case format to underscore.
     * ex. camelCase to camel_case
     *
     * @param string
     * @return string
     */
    o.to_under_score = function (str) {
        str = str.replace(/([A-Z])/g, function (full, match) {
            return '-' + match.toLowerCase()
        });
        if (str.indexOf('-') === 0) {
            return str.replace('-', '')
        }
        return str
    };

    // 把json对象转化为get字符串
    o.build_http_params = function (param, key) {
        var paramStr = "";
        if (param instanceof String || param instanceof Number || param instanceof Boolean) {
            if (key) paramStr += "&" + key + "=" + encodeURIComponent(param);
        } else {
            $.each(param, function (i) {
                var k = key == null ? i : key + (param instanceof Array ? "[" + i + "]" : "." + i);
                paramStr += '&' + build_http_params(this, k);
            });
        }
        return paramStr.substr(1);
    };

    // loading效果
    o.loading = function (el, circle, timeout) {
        el = el || '#lxh-app';
        function loading() {
            var $el = typeof el == 'object' ? el : $(el);
            if (circle) {
                $el.append('<div class=" loading loading-circle"></div>');
            } else {
                $el.append('<div class=" loading"><div class="loading1"></div><div class="loading2"></div><div class="loading3"></div></div>');
            }
            this.close = function () {
                $el.find('.loading').remove();
            };
            if (timeout) setTimeout(this.close, timeout);
        }
        return new loading()
    };

    // 格式化php时间戳
    o.format_php_timestamp = function (time, format) {
        if (! time || parseInt(time) < 1) return '';
        return new Date(parseInt(time + '000')).format(format || 'yyyy-mm-dd hh:ii:ss');
    };

    // 滚动到窗口顶部
    o.scroll_top = function () {
        // $(o).scrollTop($('body').offset().top)
        $("html, body").animate({scrollTop:$('body').offset().top}, {duration:150, easing: "swing"});
    };

    // new Date(1458692752478).format('yyyy-mm-dd hh:ii:ss')
    Date.prototype.format = function(format) {
        var date = {
            "m+": this.getMonth() + 1,
            "d+": this.getDate(),
            "h+": this.getHours(),
            "i+": this.getMinutes(),
            "s+": this.getSeconds(),
            "q+": Math.floor((this.getMonth() + 3) / 3),
            "S+": this.getMilliseconds()
        };
        if (/(y+)/i.test(format)) {
            format = format.replace(RegExp.$1, (this.getFullYear() + '').substr(4 - RegExp.$1.length));
        }
        for (var k in date) {
            if (new RegExp("(" + k + ")").test(format)) {
                format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? date[k] : ("00" + date[k]).substr(("" + date[k]).length));
            }
        }
        return format;
    };

    /**
     * 缓存管理类
     *
     * @constructor
     */
    function Cache(prefix) {
        this.storage = window.localStorage || {};
        prefix = prefix || '';

        /**
         * token值，用于跟服务器的token进行对比，如两值不同则刷新缓存
         *
         * @type {null|int|string}
         */
        this.token = null;

        /**
         * 缓存前缀
         *
         * @type {{general: string, timeout: string}}
         */
        this.prefix = {
            general: "$_" + prefix + '_',
            timeout: "@_" + prefix + '_'
        };

        /**
         * 设置token
         *
         * @param token
         */
        this.setToken = function (token) {
            this.token = token
        };

        this.getToken = function () {
            return this.token
        };

        /**
         * 缓存token
         *
         * @param token
         */
        this.saveToken = function (token) {
            this.set('$$token', token || this.token);
        };

        /**
         * 设置缓存
         *
         * @param key
         * @param val
         */
        this.set = function (key, val, timeout) {
            if (typeof val == 'object') {
                val = JSON.stringify(val);
            }
            this.storage.setItem(this.prefix.general + key, val);
            if (timeout = parseInt(timeout)) this.expire(key, timeout);
        };

        /**
         * 获取缓存
         *
         * @param key
         * @param def
         * @returns {*}
         */
        this.get = function (key, def) {
            def = def || null
            if (! this.checkTokenValid(key)) {
                return def;
            }
            //检测是否过期
            if (this.clearTimeout(key)) return null;
            var val = this.storage.getItem(this.prefix.general + key);

            try {
                if (val) {
                    if (val.indexOf("{") === 0 || val.indexOf("[") === 0) {
                        return JSON.parse(val);
                    }
                    return val;
                }
            } catch (e) {
                return def
            }
            return def;
        };

        /**
         * 检查是否应该更新缓存，是则返回false，否则返回true
         *
         * @param key
         * @returns {boolean}
         */
        this.checkTokenValid = function (key) {
            if (key == '$$token') {
                return true;
            }
            if (this.token != this.get('$$token')) {
                this.clearAll();
                this.saveToken();
                return false;
            }
            return true;
        };

        /**
         * 清除所有过期的key
         *
         */
        this.clearPastDueKey = function () {
            for (var key in this.storage) {
                if (key.indexOf(this.prefix.timeout) == -1) {
                    continue;
                }
                this.clearTimeout(key.replace(this.prefix.timeout, ""));
            }
        };

        /**
         * 检查key是否过期，是则清除并返回true，否则返回false
         *
         * @param key
         * @returns {boolean}
         */
        this.clearTimeout = function (key) {
            var d, timeoutKey = this.prefix.timeout + key, timeout = this.storage.getItem(timeoutKey);

            if (timeout) {
                d = new Date().getTime();
                if (timeout < d) {//已过期
                    delete this.storage[this.prefix.general + key];
                    delete this.storage[timeoutKey];
                    return true;
                }
            }
            return false
        };

        /**
         * 设置缓存时间，tiemeout毫秒后过期
         *
         * @param key
         * @param timeout
         */
        this.expire = function (key, timeout) {
            var d = new Date().getTime() + (parseInt(timeout));
            this.storage.setItem(this.prefix.timeout + key, d);
        };

        /**
         * 具体某一时间点过期
         *
         * @param key
         * @param timeout
         */
        this.expireAt = function (key, timeout) {
            this.storage.setItem(this.prefix.timeout + key, timeout);
        };

        /**
         * 清除所有缓存
         *
         */
        this.clearAll = function () {
            for (var i in this.storage) {
                delete this.storage[i];
            }
        };

        this.clearPastDueKey()
    }
    o.Cache = Cache;
})(window);

(function (w) {
    function Tab(iframe) {
        var self = this,
            tpl = $('#header-tab-tpl').html(),
            $menu = $('ul.tab-menu'),
            store = {},
            firstIndex = 'home',
            def = {name: firstIndex, url: '', label: ''},
            histories = [def],
            current = def,
            max = 10;
        iframe.setTab(this);

        this.current = function () {
            return current.name;
        };

        this.setMax = function (num) {
            max = num;
        };

        // 返回当前tab按钮和iframe的JQ元素对象
        this.currentEl = function () {
            var name = current.name;
            return {'tab': $('[data-action="tab-'+ name +'"]'), 'iframe': $('#wrapper-' + name)};
        };

        // 切换显示tab页
        this.switch = function (name, url, label) {
            if (! name) {
                name = current.name;
                url = current.url;
                label = current.label;
            } else {
                current = {name: name, url: url, label: label};
            }
            if (name.indexOf('menu-')!= -1) {
                var $m = $('#' + name), $p = $m.parent().parent().prev();
                // 切换tab页时选中对应菜单
                if (!$m.hasClass('active')) {
                    if (!$p.hasClass('active')) {
                        $p.click();
                    }
                    $m.click();
                }
            }
            if (name == 'home') {
                $('#menu-home').click();
            }
            if (this.show(name, url, label) === false) {
                return;
            }
            iframe.switch(name, url);
            this.addHistory(name, url, label);
        };

        // 返回上一级tab
        this.back = function (step) {
            step = (parseInt(step) || 1);
            var data = histories[step - 1] || def;
            histories.splice(step - 1, 1);
            this.switch(data.name, data.url, data.label);
        };

        this.show = function (name, url, label) {
            var $this = $('[data-action="tab-'+ name +'"]');
            if ($this.length < 1) {
                return this.open(name, url, label)
            }
            // 移除tab按钮选中效果
            this.removeActive();
            // 添加tab按钮选中效果
            $this.addClass('active');
            // 去除按钮点击特效
            $this.find('a').removeClass('waves-effect waves-info');
            return $this
        };

        this.addHistory = function (name, url, label) {
            histories = unset(histories, 'name', name);
            histories.unshift({name: name, url: url, label: label})
        };

        // 重新加载iframe
        this.reload = function (name, url) {
            if (! name) {
                name = current.name;
            }
            iframe.reload(name, url);
        };

        /**
         *
         * @returns {*}
         */
        this.num = function () {
            return $('.ticket-tab').length;
        };

        // 打开一个新的tab页
        this.open = function (name, url, label) {
            url = url || name;
            label = label || name;

            current = {name: name, url: url, label: label};
            if (typeof store[name] != 'undefined') {
                this.switch(name);
                return false;
            }
            if (this.num() >= max) {
                _alert('Exceeding quantity limit');
                return false;
            }

            firstIndex = firstIndex || name;

            iframe.create(name, url);

            store[name] = true;

            create_btn(name, label);

            var $tabBtn = this.show(name);
            // 绑定点击事件
            $tabBtn.find('.tab-close').off('click');
            $tabBtn.find('.tab-close').click(function () {
                this.close(name);
            }.bind(this));
            // 点击tab切换显示iframe
            $tabBtn.off('click');
            $tabBtn.click(function () {
                this.switch(name)
            }.bind(this));
            $tabBtn.find('.icon-refresh').off('click');
            $tabBtn.find('.icon-refresh').click(function () {
                self.reload(name, url)
            })
        };

        // 关闭tab窗
        this.close = function ($this) {
            if (! $this) {
                $this = current.name;
            }

            var name;
            if (typeof $this != 'object') {
                name = $this;
                $this = $('[data-action="tab-'+ $this +'"]');
            } else {
                name = $this.data('action').replace('tab-', '');
            }
            // 移除按钮
            $this.remove();
            // 移除iframe
            iframe.remove(name);

            delete store[name];
            // 删除历史记录
            histories = unset(histories, 'name', name);
            // 返回上一页
            if (current.name === name) {
                this.back();
            }
        };

        this.removeActive = function () {
            var $all = $('li.tab');
            // 移除所有tab按钮选中特效
            $all.removeClass('active');
            $all.find('a').addClass('waves-effect waves-info');
            $all.find('.tab-close').show(300);
        };

        // 删除数组元素
        function unset(arr, k, value) {
            var i, res = [];
            for (i in arr) {
                if (arr[i][k] == value) continue;
                res.push(arr[i]);
            }
            return res
        }

        // 创建tab按钮
        function create_btn(name, label) {
            if ($menu.find('[data-action="tab-' +name+ '"]').length > 0) {
                return false;
            }
            var html = tpl.replace('{name}', name).replace('{name}', name).replace('{label}', label);
            $menu.append(html);
        }

        function _alert(msg) {
            if (typeof w.$lxh == 'undefined') {
                return alert(msg)
            }
            w.$lxh.ui().notify().warning(trans(msg));
        }
    }

    function Iframe() {
        var tpl = $('#iframe-tpl').html(),
            store = {},
            $app = $('#lxh-app'),
            current,
            spaid,
            tab,
            $d = $(document);

        this.setTab = function (t) {
            tab = t
        };

        // 切换显示iframe
        this.switch = function (name, url) {
            var $c = this.container(name);

            if ($c.length < 1) {
                return this.create(name, url)
            }
            this.hide();

            // 显示当前iframe
            $c.show();

            current = name
        };

        this.reload = function (name, url) {
            name = name || current;
            url = url || this.container(name).attr('url');
            delete store[name];
            this.create(name, url);
        };

        this.removeStore = function (name) {
            delete store[name]
        };

        this.current = function () {
            return current
        };

        this.remove = function (name) {
            delete store[name];
            this.container(name).remove();
            // 移除所有loading效果
            $('.loading').remove();
        };

        // 创建iframe弹窗
        this.create = function (name, url) {
            if (typeof store[name] != 'undefined') return true;
            var n = NProgress,
                self = this,
                ori = url.split('?')[0],
                view = LXHSTORE.cache.get(ori),
                viewkey = LXHSTORE.VIEWKEY || '_vw',
                iframekey = LXHSTORE.IFRAMEKEY || '_f_';
            $d.trigger('app.creating');
            n.start();
            current = name;
            url = url || name;

            store[name] = true;

            if (url.indexOf('?') == -1) {
                url +='?'
            }
            url += '&' + iframekey;
            if (view) {
                url += '&'+ viewkey +'=' + view;
            }

            self.container(name).remove();
            $app.append(tpl.replace('{$name}', name).replace('{$url}', url));
            var $c = self.container(name);

            // 隐藏所有iframe
            self.hide();
            // // 显示当前iframe
            $c.show();

            $c.find('iframe').load(function (e) {
                $d.trigger('app.created');
                this.height($(e.currentTarget));
                // 关闭加载效果
                n.done();
                // 如果在iframe页创建期间切换到了其他的tab窗口，需要切换回当前窗口
                current = name;
                tab.show(name);
            }.bind(this));

            // 保存链接用于刷新操作
            $c.attr('url', ori);
        };

        // 自动设置高度
        this.height = function ($c) {
            if (! $c) $c = this.container(current).find('iframe');
            if (typeof $c != 'object') $c = this.container($c).find('iframe');
            if (typeof $c[0] == 'undefined') return;
            var iframe = $c[0],
                iframeWin = (iframe.contentWindow || iframe.contentDocument.parentWindow) || iframe,
                height,
                minHeight = 725;
            if (iframeWin.document.body) {
                height = iframeWin.document.documentElement.scrollHeight || iframeWin.document.body.scrollHeight;
                height = height > minHeight ? (height) : minHeight;
                // $c.animate({height: height + 'px'});
                $c.css('height', height + 'px');
                $c.slideDown(350);
            }
        };

        this.hide = function () {
            $('.lxh-wrapper').hide()
        };

        this.container = function (name) {
            return $('#wrapper-' + name)
        };
    }

    w.Tab = Tab;
    w.Iframe = Iframe;
})(window);

