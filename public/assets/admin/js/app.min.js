/**
 * 初始化js
 *
 * Created by Jqh on 2017/7/3.
 */
// blade js
eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('1a.1i={1B:"1.0-1D",P:{},1L:3(p,k){5("3"!=I k)N O("1K 1J");o.P[p]=k}};1a.1i={1B:"1.0-1D",P:{},1L:3(p,k){5("3"!=I k)N O("1K 1J");o.P[p]=k}};1a.1R=3(p,k){3 u(a){4 a.6(1d 1e("["+e.1o.1O+"|"+e.1o.X+"]","j"),"")}3 v(a,c,b){c=E(c.10);4 e.1x["$"+a].6("{10}",c).6("{K}",\'7 1s = "\'+b+\'"\')}3 B(a,c){4-1!=c.Q(e.8["$"+a])&&-1!=c.Q(e.8["$X"+a])?!0:!1}3 q(a,c,b,d,f){7 g=e.8["$"+a],l=e.8["$"+c];c=b.11(1d 1e(g+"[ ]*([^@]*?)\\n","i"));5(!c||!c[0])N O(\'W T: "\'+g+\'" 13 1t K\');b=b.6(c[0],"");f&&"@"!=l&&(f=b.23(l),b=-1!=f?b.24(0,f):b.6(l,""));c=c[0].6(1d 1e("(?:"+g+"[ ])*|\\n","j"),"");B(a,b)&&"5"==a&&(b=w(b));d?a=b:(a=b.11(1d 1e("([^"+l+"]*)","j")),a=a[0]);b=b.6(a,"");4{10:c,K:a,16:b}}3 m(a,c){4(a=c.11(e.H[e.8["$"+a]]))?a.12:0}3 x(a){4 a.6(/(^\\s*)|(\\s*$)/g,"")}7 e={1b:"#1S",17:Z,15:p,L:{},1o:{1O:"{",X:"}"},8:{$5:"@5",$F:"@F",$M:"@M",$V:"@V",$J:"@J",$U:"@U",$X:"@",$1g:{1f:"@1f"},$P:{}},H:{$7:/{([a-z|G]*[0-9]*[G]*[\\.]*([a-z|G]*[0-9]*[G]*)+([\\[]?[\'|"]?([a-z|G]*[0-9]*[G]*[\\.]*([a-z|G]*[0-9]*[G]*)+)[\'|"]?[\\]]?))}/j,1j:/[\\[]([\'|"]?[a-z|G]*[0-9]*[G]*[\\.]*([a-z|G]*[0-9]*[G]*)+[\'|"]?)[\\]]/j,1E:/[ ]([\'|"]*[\\[G\\.\\]a-z]+[0-9\\]]*[\'|"]*)+/j,1G:/[ ]+((?![\'|"])[\\[G\\.\\]a-z]+[0-9\\]]*)+[ ]*/j,$5:/@5[ ]+([\\s\\S.])+@V\\b/j,$J:/@J[ ]+([\\s\\S.])+@U\\b/j,1I:/{(@[^{|{@]+)}/j,1k:/@[a-z]*\\b/i,1N:/{(@[^{|{@]+)@}/j,"@5":/@5\\b/j,"@V":/@V\\b/j,"@M":/@M\\b/j,"@F":/@F\\b/j,"@J":/@J\\b/j,"@U":/@U\\b/j},1x:{$5:"\\n 5 ({10}) { \\n {K} \\n } \\n",$M:" F 5 ({10}) { \\n {K} \\n } \\n",$F:" F { \\n {K} \\n } \\n"}};e.15=p;e.L=k||{};e.8.$P=1i.P;7 r=o;o.22=3(){4 e.L};o.21=3(){4 e.15};o.1u=3(a){e.L=a||e.L;a=e.15;7 c=m("5",a),b=m("V",a);5(c>b)N O(\'W T: 13 "\'+e.8.$V+\'"\');5(c<b)N O(\'W T: 13 "\'+e.8.$5+\'"\');5(m("F",a)>c)N O(\'W T: 1v "\'+e.8.$F+\'" 1w\');b=m("M",a);5(0==c&&0<b)N O(\'W T: 1v "\'+e.8.$M+\'" 1w\');c=m("J",a);a=m("U",a);5(c>a)N O(\'W T: 13 "\'+e.8.$U+\'"\');5(c<a)N O(\'W T: 13 "\'+e.8.$J+\'"\');4 y(z(A(w(C(e.15)))))};o.1z=3(a,c){e.1b=a||e.1b;e.17=c||e.17;1Y.1X(e.1b).1U=o.1u();"3"!=I e.17||e.17(o)};o.1T=3(a){e.L=a||e.L;o.1z()};o.1n=3(a,c){"19"==I a?e.L=a:e.L[a]=c};7 z=3(a){4 a.6(e.H.1N,3(a,b,d){d=b.11(e.H.1k);7 c,g;b=b.6(d[0],"");d=d[0].6("#","");R(c 14 e.8.$P)5(c==d){a=x(D.1p(b,!1,"!!"));a=a.18("!!");b=[];b.Y(r);R(g 14 a)"3"!=I a[g]&&(d=a[g],d=0===d.Q("{")&&-1!=d.Q("}")||0===d.Q("[")&&-1!=d.Q("]")?!0:!1,d?(a[g]=1c.1Q(x(a[g])),b.Y(a[g])):(a[g]=a[g].6(/\'|"/g,""),"3"!=I a[g]&&b.Y(x(a[g]))));4 e.8.$P[c].1P(r,b)}4 a})},A=3(a){4 a?a.6(e.H.1I,3(a,b,d){d=b.11(e.H.1k);d=d[0];R(7 c 14 e.8.$1g)5(d==e.8.$1g[c])4 D[c](b.6(d,""));4 a}):""},D={1f:3(a){a=o.1r(a,"??",2);7 c=o.1r(a[1],"::",1),b="{",d;R(d 14 c)"3"!=I c[d]&&(1==d&&(b+="} F {"),b=-1!=c[d].Q("\'")||-1!=c[d].Q(\'"\')?b+(" 7 1q = "+c[d]):b+(" 7 1q = "+o.1p(c[d],!0)));b="5 ("+o.1H(a[0],!0)+") "+b+"}";1F(b);4 1q||""},1p:3(a,c,b){b=b||" ";7 d=0,f,g=b,l=b;4 a.6(e.H.1E,3(a,b){f=t(b,Z,c);d++;1==d&&(g="");4"19"==I f?g+1c.1h(f)+l:g+f+l})},1H:3(a,c,b){b=b||" ";4 a.6(e.H.1G,3(a,e){a=t(e,Z,c);4"19"==I a?b+1c.1h(a)+b:b+a+b})},1r:3(a,c,b){a=a.18(c);5(a.12<b)N O(\'W T: "\'+e.8.$1g.1f+\'" 1t 1V 1W 25\');4 a}},C=3(a){4 a.6(e.H.$J,3(a,b,d){a=q("J","U",a,!0,!0);d=a.10.18(" ");7 c=[];R(b=0;b<d.12;b++)d[b]&&"\\n"!=d[b]&&c.Y(d[b].6(/[\\s\\n]/j,""));d="";7 e=Z,l=!1;7 h=c.1A();h=u(h);h=n(h)||[];1<c.12&&(e=c.1A());c=c.1Z();R(b 14 h)5("3"!=I h[b]){7 k=a.K;e&&r.1n(u(e),b);r.1n(u(c),h[b]);5(l||B("J",k))l=!0,k=C(k);d+=y(z(A(w(k))))}4 d})},w=3(a,c){4 a.6(e.H.$5,3(a,c,f){f=q("5","X",a);a=f.16;c=[];c.Y(f.K);f=v("5",f,0);R(7 b=m("M",a),d=1;d<=b;d++){7 h=q("M","X",a);a=h.16;c.Y(h.K);f+=v("M",h,d)}m("F",a)&&(h=q("F","X",a),h.16&&(a=h.16.6("F","")),c.Y(h.K),f+=v("F",h,d));1F(f);a&&(a=a.6(e.8.$V,""));4(y(z(A(c[1s])))||"")+a})},y=3(a,c,b,d){4 a?a.6(e.H.$7,3(a,e,k){4 t(e,c,b,d)}):Z},t=3(a,c,b,d){5(-1==a.Q("["))4 b?(d=n(a,c,d),"19"==I d?1c.1h(d):"20"==I d?d:\'"\'+d+\'"\'):n(a,c,d);b=a.6(e.H.1j,"").6("[]","");c=n(b,c,d||{});a=a.11(e.H.1j);5(!a)4 d;a=a[0].6(/^\\[+|\\]+$/1m,"");b=/\'+|"+/1m;7 f=a;4/^\\d+$/.1l(f)||/^\\-[1-9][0-9]*$/.1l(f)?n(a,c,d):b.1l(a)?n(a.6(b,""),c,d):n(n(a,k),c,d)},n=3(a,c,b){c=c||e.L;R(7 d=a.18("."),f=0;f<d.12;f++)5("1M"!=I c[d[f]])c=c[d[f]];F 4"1M"!=I b?b:a;4 c},E=3(a){4 a?a.6(e.H.$7,3(a,b,d){4"1C(\'"+b.6(/\'+/1m,"\\\\\'")+"\', Z, 1y, 1y)"}):Z};1a.1C=t};',62,130,'|||function|return|if|replace|var|placeholders|||||||||||gi|||||this|||||||||||||||||else|_|regs|typeof|foreach|content|vars|elseif|throw|Error|customTags|indexOf|for||error|endforeach|endif|Syntax|end|push|null|exp|match|length|miss|in|tpl|full|call|split|object|window|selector|JSON|new|RegExp|compare|tags|stringify|BladeConfig|stringVar|tagName|test|gm|assign|delimiter|transVar|result|compareSyntaxAnalysis|key|expression|fetch|redundant|placeholder|model|false|render|shift|version|___trans__var___|dev|jsvar|eval|compareJsvar|compareTransVar|tag|argument|Invalid|addTag|undefined|customTag|start|apply|parse|Blade|blade|rerender|innerHTML|is|not|querySelector|document|pop|boolean|getTpl|getVars|lastIndexOf|substr|legal'.split('|'),0,{}));
// lxh-loader
(function (w) {
    var cache = LXHSTORE.cache,
        version = cache.getToken(),
        configs = LXHSTORE.loaderConfig,
        useCache = configs.save || false,
        lifetime = configs.lifetime || 8640000,
        loaded = {};

    function Loader(srcs, completed) {
        var queue = [],
            unstores = [],
        // 保证代码按顺序执行
            map = {};

        var loader = {
            add: function (src) {
                if (typeof src == 'object') {
                    for (var i in src) {
                        this.add(src[i]);
                    }
                    return this;
                }

                if (! src) return;
                if (src.indexOf('.css') == -1) {
                    if (src.indexOf('?') == -1) {
                        src = src.indexOf('.js') == -1 ? (src+'.js') : src;
                    }
                }

                src = normalize_url(src);
                map[src] = '';
                queue.push(src);
                return this;
            },
            // 发起请求
            request: function () {
                var code, i;
                for (i in queue) {
                    if (typeof loaded[queue[i]] == 'undefined') {
                        loaded[queue[i]] = 1;
                    } else {
                        is_completed(queue[i]);
                        continue;
                    }

                    if (queue[i].indexOf('.css') != -1) {
                        async_load_style(queue[i]);
                        continue;
                    }

                    if (useCache && saveable(queue[i]) && (code = cache.get(get_cache_key(queue[i])))) {
                        run(code);
                        is_completed(queue[i]);
                        continue;
                    }
                    $.ajax({
                        url : queue[i],
                        dataType: 'text',
                        ifModified: false,
                        cache: false,
                        success: function (code) {
                            this.url = parse_url(this.url);
                            map[this.url] = code;
                            // 判断队列所有内容是否加载完毕
                            is_completed(this.url);
                            // 保存到缓存
                            save(this.url, code);
                        }
                    });
                }

                function parse_url(url) {
                    return  url.split('&_=')[0]
                }
            },

            // 禁止本地存储的路径
            disableStorage: function (path) {
                if (!path) return this;
                if (typeof path == 'object') {
                    for (var i in path) {
                        this.disableStorage(path[i]);
                    }
                    return this;
                }

                unstores.push(get_path(path));
                return this;
            },

            completed: function (callback) {
                completed = callback;
                return this;
            }

        };

        loader.add(srcs);

        for (var i in loader) {
            this[i] = loader[i].bind(this);
        }

        /////////////////////////////////////////////////
        function saveable(path) {
            path = get_path(path);

            for (var i in unstores) {
                if (unstores[i] == path) return false;
            }
            return true;
        }

        function async_load_style(css) {
            //异步延迟加载样式
            var link = $('<link />');
            link.attr('href', css);
            link.attr('rel', 'stylesheet');
            link.load(function () {
                // 判断队列所有内容是否加载完毕
                is_completed(css);
            });
            link.appendTo($('head'));
        }

        // 保存到缓存
        function save(url, code) {
            if (! useCache || !saveable(url)) return;
            // 缓存
            var key = get_cache_key(url);

            cache.set(key, code);
            cache.expire(key, lifetime);
        }

        // 判断队列所有内容是否加载完毕
        function is_completed(url) {
            queue = array_remove(queue, url);
            if (queue.length < 1) {
                for (var i in map) {
                    run(map[i]);
                }

                // 加载完毕
                completed && completed();
            }
        }

    }

    function run(code) {
        try {
            eval.call(w, code);
        } catch (e) {
            console.error('ERROR: ', e);
        }
    }

    function parse_alias(url) {
        url = url.split('?');

        if (typeof configs.alias[url[0]] != 'undefined') {
            url[0] = configs.alias[url[0]];
        }
        return url.join('?');
    }
    function parse_path(url) {
        url = url.split('/');

        if (typeof configs.paths[url[0]] != 'undefined') {
            url[0] = configs.paths[url[0]];
        }

        return url.join('/');
    }

    function get_cache_key(url) {
        return get_path(url).replace(/\//gi, '');
    }

    function get_path(url) {
        return url ? url.split('?')[0] : '';
    }

    function normalize_url(url) {
        url = parse_path(parse_alias(url));
        if (url.indexOf('?') == -1) {
            return url + '?v=' + version
        }
        return url;
    }

    w.LxhLoader = Loader
})(window);
// content init
(function(w){
    var $d = $(document);
    $d.on('shown.bs.collapse', function () {LXHSTORE.IFRAME.height()});
    $d.on('pjax:complete', function () {$(parent.window).scrollTop(0);});
    var obj = window.top.document;
    function onMouseWheel(e) {
        e = e || window.event;
        if (e.type == "mousewheel") {
            delta = e.wheelDelta / 12;
        } else {
            delta = e.detail / 3 * -10;
        }
        if (chrome == -1) {
            obj.documentElement.scrollTop -= delta;
            if (e.preventDefault) {
                e.preventDefault();
            }
            return false;
        }
    }
    if (obj != null && obj != undefined) {
        var chrome = navigator.userAgent.search(/chrome/i),
            delta = 0;
        if (chrome != -1) {
            document.addEventListener("mousewheel", onMouseWheel, false);
        }
    }
})(window);
__then__(function () {
    if (typeof $.pjax == 'undefined') return;
    $.pjax.defaults.timeout = 10000;
    $.pjax.defaults.maxCacheLength = 0;
    $(document).pjax('#pjax-container a:not(a[target="_blank"])', {container: '#pjax-container'});
    $(document).on('submit', 'form[pjax-container]', function(e) {$.pjax.submit(e, '#pjax-container')});
    $(document).on("pjax:popstate", function() {
        $(document).one("pjax:end", function(e) {
            $(e.target).find("script[data-exec-on-popstate]").each(function() {
                $.globalEval(this.text || this.textContent || this.innerHTML || '');
            });
        });
    });
    var $loading, $current = LXHSTORE.TAB.currentEl();
    $(document).on('pjax:send', function(xhr) {
        NProgress.start();
        $current = LXHSTORE.TAB.currentEl();
        if(xhr.relatedTarget && xhr.relatedTarget.tagName && xhr.relatedTarget.tagName.toLowerCase() === 'form') {
            var $submit_btn = $('form[pjax-container] :submit');
            if($submit_btn) $submit_btn.button('loading');
        }
    });
    $(document).on('pjax:complete', function(xhr) {
        NProgress.done();
        if(xhr.relatedTarget && xhr.relatedTarget.tagName && xhr.relatedTarget.tagName.toLowerCase() === 'form') {
            var $submit_btn = $('form[pjax-container] :submit');
            if($submit_btn) $submit_btn.button('reset');
        }
        // 重新绑定点击事件
        $('.grid-per-pager').change(change_pages);
        // 重新计算iframe高度
        LXHSTORE.IFRAME.height($current.iframe.find('iframe'));
    })
});
// global init
(function (window) {
    var _data = __ini__(), $cache = LXHSTORE.cache, $d = $(document);

    dispatch();

    function dispatch() {
        var jsversion = _data.options['js-version'],
            cssversion = _data.options['css-version'];

        _data.options.cache = $cache;

        // 加载css
        new LxhLoader(get_used_css(_data.publicCss, cssversion)).request();

        var dataApi = _data.options.dataApi;

        new LxhLoader(get_used_js(_data.publicJs, jsversion), function () {
            setTimeout(init, 1);
        }).disableStorage(dataApi).request();
    }

    // 初始化完成，执行动作
    function call_actions() {
        lxhActions = parent.lxhActions;
        for (var i in lxhActions) {
            if (typeof lxhActions[i] == 'function') {
                lxhActions[i].apply(this);
            }
        }
        lxhActions = parent.lxhActions = [];
        $d.trigger('app.completed');
    }

    /**
     * 初始化
     */
    function init() {
        if (typeof Lxh == 'undefined') return $(call_actions);
        window.$lxh = new Lxh(_data.options);

        var lang = $lxh.config().get('language');

        var serverOptions = $lxh.createStore({});
        if (typeof load_data == 'function') {
            serverOptions.set(load_data());
        }

        // 语言包设置
        $lxh.language().type(lang);
        // 注入语言包数据
        $lxh.language().fill(serverOptions.get('language') || null, true);

        // 生成table 展示隐藏字段功能按键
        $('[data-pattern]').each(function () {
            var $tableScrollWrapper = $(this);
            if (typeof $tableScrollWrapper.responsiveTable != 'undefined') {
                $tableScrollWrapper.responsiveTable($tableScrollWrapper.data());
            }
        });

        // 初始化完毕，加载钩子
        $(call_actions);
    }

    function get_lang_cache_key(lang) {
        return 'language_' + lang
    }

    /**
     * 检测缓存中是否存在语言包，返回需要加载的语言包模块
     *
     * @param lang
     * @param scopes
     * @param useCache
     * @returns {*}
     */
    function check_cache_language(lang, scopes, useCache) {
        var cacheKey = get_lang_cache_key(lang), package = $cache.get(cacheKey), t = [], i;

        if (typeof add_lang_scopes == 'function') {
            var addScopes = add_lang_scopes();
            for (i in addScopes) {
                scopes.push(addScopes[i]);
            }
        }

        if (! package || ! useCache) return scopes || [];
        for (i in scopes) {
            if (! package[scopes[i]]) t.push(scopes[i]);
        }
        return t || [];
    }

    /**
     * 处理需要加载的css数组
     *
     * @param publicCss
     * @param v
     * @returns {*}
     */
    function get_used_css(publicCss, v) {
        cssLibArr = parent.cssLibArr;
        if (typeof cssLibArr != 'undefined') {
            cssLibArr = array_unique(cssLibArr);
            for (var i in cssLibArr) {
                publicCss.push(cssLibArr[i]);
            }
        }

        for (i in publicCss) {
            if (publicCss[i].indexOf('.css') == -1) {
                publicCss[i] += '.css'
            }
            publicCss[i] = publicCss[i] + '?v=' + v;
        }

        cssLibArr = parent.cssLibArr = [];
        return publicCss;
    }

    /**
     * 处理需要加载的js数组
     *
     * @param publicJs
     * @param version
     * @returns {*}
     */
    function get_used_js(publicJs, version) {
        jsLibArr = parent.jsLibArr;
        if (typeof jsLibArr != 'undefined') {
            jsLibArr = array_unique(jsLibArr);
            for (var i in jsLibArr) {
                if (jsLibArr[i].indexOf('.js') == -1 && jsLibArr[i].indexOf('?') == -1) {
                    publicJs.push(jsLibArr[i] + '.js?v=' + version);
                } else {
                    publicJs.push(jsLibArr[i]);
                }
            }
        }
        jsLibArr = parent.jsLibArr = [];

        var scopes = check_cache_language(_data.options.language, _data.langScopes, _data.options['use-cache']);
        var loads = {};

        // 判断是否需要载入语言包
        if (scopes.length > 0) {
            loads.language = scopes.join(',');
        }

        var jsApi = get_load_data_js_api(loads);

        if (jsApi) {
            publicJs.unshift(jsApi);
        }

        return publicJs;

        function get_load_data_js_api(data) {
            var api = _data.options.dataApi;

            var p = '';
            for (var i in data) {
                p += '&n[]=' + i + ':' + data[i];
            }

            if (p) {
                return api + '?' + p;
            }
            return ''
        }
    }

    window.get_used_js = get_used_js;
    window.get_used_css = get_used_css;
    window.call_actions = call_actions;
})(window);
